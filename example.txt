
import React, { Component } from 'react';

import {
    ScrollView, Text, View, StatusBar, ActivityIndicator, Image,
    BackHandler, AsyncStorage, TextInput, TouchableOpacity,
    ToastAndroid, Platform, KeyboardAvoidingView, FlatList, NetInfo,StyleSheet
} from 'react-native';


import {
    DailyAttendanceCombo, TasksCombo,
    LeavesCombo, FinanceCombo,
    ReportsCombo, NoticeCombo, SettingsCombo,
    drawerSelectedOption
} from '../../MenuDrawer/DrawerContent';

import { Actions } from 'react-native-router-flux';
import { EmployeeList } from '../../../services/EmployeeTrackService';
import { NoticeStyle } from '../notice/NoticeStyle'

import Modal from 'react-native-modalbox';

import { Modal as Modal1 } from 'react-native';
import moment from "moment";
import { CommonStyles } from '../../../common/CommonStyles';
import DateTimePicker from 'react-native-modal-datetime-picker';
import { urlDev, urlResource } from '../../../services/api/config';
import ImageViewer from 'react-native-image-zoom-viewer';
import Feather from 'react-native-vector-icons/Feather'
import Entypo from 'react-native-vector-icons/Entypo'

import Ionicons from 'react-native-vector-icons/Ionicons'
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons'

import _ from "lodash";

import * as Permissions from 'expo-permissions'
import * as ImagePicker from 'expo-image-picker'

import { SinistreStyle } from './SinistreStyle';
import * as actions from '../../../common/actions';
import { SaveTask, PriorityList } from '../../../services/TaskService';



const refreshOnBack = () => {
    if (global.userType == "admin") {
        Actions.TabnavigationInTasks();
        Actions.TaskListScreen();
    } else {
        Actions.userTask();
        Actions.CreateByMe();
    }

}

const STATUS_BAR_HEIGHT = Platform.OS === 'ios' ? 40 : StatusBar.currentHeight;
function StatusBarPlaceHolder() {
    return (
        <View style={{
            width: "100%",
            height: STATUS_BAR_HEIGHT,
            backgroundColor: '#F3F3F3',
        }}>
            <StatusBar />
        </View>
    );
}

const numColumns = 2;
export default class CreateSinistre extends Component {
    constructor(props) {
        super(props);
        this.state = {
            userId: "",
            companyId: "",
            TaskId:null,
            date: '',
            taskTitle: "",
            taskDescription: "",
            EmployeeList: [],
            priorityList: [],
            isDateTimePickerVisible: false,
            PriorityId: null,
            PriorityName: null,
            touchabledisableForsaveTask: false,
            EmpName: null,
            EmpValue: null,
            TaskGroupId: 0,
            isModelVisible: false,
            fileList:[]

        }
    }

    goBackToTasks() {
        TasksCombo();
    }
    goBack() {
        Actions.pop();
    }
    returnPage() {
        actions.push("TaskListScreen");
    }

    openmodalForImage() {
        this.refs.modalForImage.open();
    }
    _takePhoto = async () => {
        this.refs.modalForImage.close()
        await Permissions.askAsync(Permissions.CAMERA_ROLL);
        await Permissions.askAsync(Permissions.CAMERA);
        let pickerResult = await ImagePicker.launchCameraAsync({
            allowsEditing: true,
            // aspect: [4, 4],
            //quality: .2,
            height: 250,
            width: 250,
        });
        console.log(pickerResult, '.......................')
        if (pickerResult.cancelled == false) {
            this.handleUploadPhoto(pickerResult)
        }
    };
    _pickImage = async () => {
        this.refs.modalForImage.close()
        await Permissions.askAsync(Permissions.CAMERA_ROLL);
        await Permissions.askAsync(Permissions.CAMERA);
        let pickerResult = await ImagePicker.launchImageLibraryAsync({
            allowsEditing: true,
            //aspect: [4, 4],
            quality: 1,
            height: 250,
            width: 250,
        });
        if (pickerResult.cancelled == false) {
            this.handleUploadPhoto(pickerResult)
        }
    };
    handleUploadPhoto = async (pickerResult) => {

        const userToken = await AsyncStorage.getItem("userToken");
        console.log(pickerResult.uri, '...............send')
        var data = new FormData();
        data.append('BlobName', {
            uri: pickerResult.uri,
            name: 'my_photo.jpg',
            type: 'image/jpg'
        })
        this.setState({ progressVisible: true });
        fetch(urlDev + "RtTaskApi/UploadDocuments?containerName=" + this.state.Imageparam, {
            headers: {
                'Authorization': `bearer ${userToken}`,
                'Accept': 'application/json',
                'Content-Type': 'multipart/form-data'
            },
            method: "POST",
            body: data
        })
            .then( response => response.json() )
            .then(response => {
                let attachmentModel = {
                    TaskId: this.state.TaskId,
                    FileName: response.ImagePath,
                    BlobName: response.ImagePath,
                }
                console.log("upload succes", response);
                this.setState({ fileList: this.state.fileList.concat(attachmentModel) })

                this.setState({ ImageFileName: response.ImagePath });
                this.setState({ progressVisible: false });
                ToastAndroid.show('Uploaded successfully', ToastAndroid.TOP);
                // Toast.showSuccess( 'Uploaded successfully', { duration: 1000 } );

                console.log(response.ImagePath, 'return..............');
                //this.updateEmployeeRecords();
                this.setState({ photo: null });
            })
            .catch(error => {
                this.setState({ progressVisible: false });
                console.log("upload error", error);
                ToastAndroid.show('Upload Fail', ToastAndroid.TOP);
                // this.errorToast();
            });
    };
    gotoBordDetail( item )
    {
        this.setState( { images: [{ url: urlResource + item.FileName }] } );
        this.ImageViewer();
    }
    errorToast = () => {
        Toast.show('Something went wrong', {
            containerStyle: {
                backgroundColor: '#CB2431',
                paddingHorizontal: 15,
                borderRadius: 20
            },
            textColor: '#ffffff',
            duration: 1000
        })
    }
    _showDateTimePicker = () => this.setState({ isDateTimePickerVisible: true });
    _hideDateTimePicker = () => this.setState({ isDateTimePickerVisible: false });

    _handleDatePicked = (date) => {
        this.setState({ date: date })

        this._hideDateTimePicker();
    }

    /*async componentDidMount() {
        const uId = await AsyncStorage.getItem("userId");
        const cId = await AsyncStorage.getItem("companyId");
        this.setState({ userId: uId, companyId: cId });
        this.getEmployeeList(cId);
        this.getPriorityList();
        this.setState({ TaskGroupId: this.props.BoardId })
        BackHandler.addEventListener('hardwareBackPress', this.handleBackButton);
    }*/

    a/*sync saveTask() {
        if (!await NetInfo.isConnected.fetch()) return ToastAndroid.show('Please connect to Internet', ToastAndroid.TOP);
            if (this.state.taskTitle === "") return ToastAndroid.show('Title Can not be Empty ', ToastAndroid.TOP);
            this.setState({ touchabledisableForsaveTask: true })
            try {
                let taskModel = {
                    CreatedById: this.state.userId,
                    CompanyId: this.state.companyId,
                    Title: this.state.taskTitle,
                    Description: this.state.taskDescription,
                    AssignToName: this.state.EmpName,
                    AssignedToId: this.state.EmpValue,
                    TaskGroupId: this.state.TaskGroupId,
                    PriorityId: this.state.PriorityId,
                    DueDate: moment(this.state.date).format("YYYYY-MM-DD")
                };
                this.setState({ progressVisible: true });
                const userToken = await AsyncStorage.getItem("userToken");
                var data = new FormData();
                data.append('taskmodel', JSON.stringify(taskModel))
                data.append('taskAttachmentsModel', JSON.stringify(this.state.fileList))
                fetch(urlDev + "RtTaskApi/SaveTask/", {
                    headers: {
                        'Authorization': `bearer ${userToken}`,
                        'Accept': 'application/json',
                        'Content-Type': 'multipart/form-data'
                    },
                    method: "POST",
                    body: data
                })
            .then( response => response.json() )
            .then(response => {
                        this.setState({ progressVisible: false });
                        ToastAndroid.show('Task saved successfully', ToastAndroid.TOP);
                        refreshOnBack();
                    })
                    .catch(error => {
                        this.setState({ progressVisible: false });
                        console.log("error occured");
                        this.setState({ touchabledisableForsaveExpense: true })
                    });

            } catch (error) {
                this.setState({ progressVisible: false });
                console.log(error);
            }
    }*/

    /*getEmployeeList = async (companyId) => {
        try {
            await EmployeeList(companyId)
                .then(res => {
                    this.setState({ EmployeeList: res.result, progressVisible: false });
                })
                .catch(() => {
                    this.setState({ progressVisible: false });
                });

        } catch (error) {
            this.setState({ progressVisible: false });
        }
    }*/

    /*getPriorityList = async () => {
        try {
            await PriorityList()
                .then(res => {
                    this.setState({ priorityList: res.result, progressVisible: false });
                })
                .catch(() => {
                    this.setState({ progressVisible: false });
                });

        } catch (error) {
            this.setState({ progressVisible: false });
        }
    }*/

    /*async  setAssignTo(v, t) {
        this.setState({ EmpName: t })
        this.setState({ EmpValue: v })
        this.refs.modal1.close()
    }*/

    /*renderEmpList() {
        let content = this.state.EmployeeList.map((empName, i) => {
            return (
                <TouchableOpacity style={{ paddingVertical: 7, borderBottomColor: '#D5D5D5', borderBottomWidth: 2 }} key={i}
                    onPress={() => { this.setAssignTo(empName.Value, empName.Text) }}>
                    <Text style={[{ textAlign: 'center' }, SinistreStyle.dbblModalText]} key={empName.Value}>{empName.Text}</Text>
                </TouchableOpacity>
            )
        });
        return content;
    }

    async  setPriority(id, name) {
        this.setState({ PriorityId: id })
        this.setState({ PriorityName: name })
        this.refs.modalPriority.close()
    }

    renderPriorityList() {
        let content = this.state.priorityList.map((x, i) => {
            return (
                <TouchableOpacity style={{ paddingVertical: 7, borderBottomColor: '#D5D5D5', borderBottomWidth: 2 }} key={i}
                    onPress={() => { this.setPriority(x.Id, x.Name) }}>
                    <Text style={[{ textAlign: 'center' }, SinistreStyle.dbblModalText]} key={x.Id}>{x.Name}</Text>
                </TouchableOpacity>
            )
        });
        return content;
    }*/

    handleBackButton = () => {
        this.goBack();
        return true;
    }

    componentWillUnmount() {
        BackHandler.removeEventListener('hardwareBackPress', this.handleBackButton);
    }
    ImageViewer() {
        this.setState({ isModelVisible: true })
    }

    ShowModalFunction(visible) {
        this.setState({ isModelVisible: false });
    }
    /*renderItem = ( { item, index } ) =>
    {

        return (
            <TouchableOpacity
                style={{
                    //  backgroundColor: 'gray',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: "45%",
                    margin: 5,
                    alignItems: 'center',
                    borderRadius: 15,
                    borderWidth: 1,
                    borderColor: 'gray',
                    marginLeft: 10,
                    height: 200,
                }}
                onPress={() => { this.gotoBordDetail( item ) }}
            >
                <View>

                    <Image style={{ height: 150, width: 150, }} resizeMode='cover'
                        source={{ uri: urlResource + item.FileName }} >
                    </Image>

                </View>
            </TouchableOpacity>
        );
    };*/
    render() {
        return (
            <View
                style={{
                    flex: 1, backgroundColor: '#ffffff', flexDirection: 'column',
                }}>
                <StatusBarPlaceHolder />
                <View
                    style={CommonStyles.HeaderContent}>
                    <View
                        style={CommonStyles.HeaderFirstView}>
                        <TouchableOpacity
                            style={CommonStyles.HeaderMenuicon}
                            onPress={() => { this.goBack() }}>
                            <Image resizeMode="contain" style={CommonStyles.HeaderMenuiconstyle}
                                source={require('../../../assets/images/left_arrow.png')}>
                            </Image>
                        </TouchableOpacity>
                        <View
                            style={CommonStyles.HeaderTextView}>
                            <Text
                                style={CommonStyles.HeaderTextstyle}>
                                Déclarer un sinistre
                            </Text>
                        </View>
                    </View>
                    <View
                        style={CommonStyles.createTaskButtonContainer}>
                        <TouchableOpacity
                            disabled={this.state.touchabledisableForsaveTask}
                            onPress={() => {}}
                            style={CommonStyles.createTaskButtonTouch}>
                            <View style={CommonStyles.plusButton}>
                                <MaterialCommunityIcons name="content-save" size={
                                            Platform.OS==='ios'? 15.3 : 17.5} color="#ffffff" />
                            </View>
                            <View style={CommonStyles.ApplyTextButton}>
                                <Text style={CommonStyles.ApplyButtonText}>
                                    Valider
                                </Text>
                            </View>
                        </TouchableOpacity>
                    </View>
                </View>

                <View style={{ flex: 1 }}>

                    <ScrollView showsVerticalScrollIndicator={false}
                        keyboardDismissMode="on-drag"
                        style={{ flex: 1, }}>
                        <View>
                                        <View style={styles.Select}>
                                            <TouchableOpacity onPress={() => this.refs.modal1.open()}>
                                                <View
                                                    style={SinistreStyle.assignePeopleContainer}>
                                                    <Ionicons name="md-people" size={20} style={{ marginRight: 4, }} color="#4a535b" />
                                                    <TextInput
                                                        style={SinistreStyle.assigneePeopleTextBox}
                                                        placeholder="Type de sinistre"
                                                        placeholderTextColor="#dee1e5"
                                                        editable={false}
                                                        autoCapitalize="none"
                                                        value={this.state.EmpName}
                                                    >
                                                    </TextInput>
                                                </View>
                                            </TouchableOpacity>
                                            <View style={SinistreStyle.assigneePeopleTextBoxDivider}>
                                                {/* horizontal line dummy view */}
                                            </View>
                                        </View>

                                        <View style={styles.Select}>
                                            <TouchableOpacity onPress={() => this.refs.modal1.open()}>
                                                <View
                                                    style={SinistreStyle.assignePeopleContainer}>
                                                    <Ionicons name="md-people" size={20} style={{ marginRight: 4, }} color="#4a535b" />
                                                    <TextInput
                                                        style={SinistreStyle.assigneePeopleTextBox}
                                                        placeholder="Numero du contrat"
                                                        placeholderTextColor="#dee1e5"
                                                        editable={false}
                                                        autoCapitalize="none"
                                                        value={this.state.EmpName}
                                                    >
                                                    </TextInput>
                                                </View>
                                            </TouchableOpacity>
                                            <View style={SinistreStyle.assigneePeopleTextBoxDivider}>
                                                {/* horizontal line dummy view */}
                                            </View>
                                        </View>


                                        <View
                                            style={SinistreStyle.titleInputRow}>
                                            <TextInput
                                                style={SinistreStyle.createTaskTitleTextBox1}
                                                placeholder="Lieu du sinistre"
                                                placeholderTextColor="#dee1e5"
                                                autoCapitalize="none"
                                                onChangeText={text => this.setState({ taskTitle: text })}
                                            >
                                            </TextInput>
                                        </View>


                                        <View
                                            style={SinistreStyle.titleInputRow}>
                                            <TextInput
                                                style={SinistreStyle.createTaskTitleTextBox1}
                                                placeholder="Estimation des domages et pertes"
                                                placeholderTextColor="#dee1e5"
                                                autoCapitalize="none"
                                                onChangeText={text => this.setState({ taskTitle: text })}
                                            >
                                            </TextInput>
                                        </View>
                                        
                                        <View style={SinistreStyle.createTaskDueDateContainer}>
                                            <TouchableOpacity onPress={this._showDateTimePicker}
                                                style={SinistreStyle.createTaskDueDateIcon}>
                                                <MaterialCommunityIcons name="clock-outline" size={18} color="#4a535b"
                                                    style={{ marginHorizontal: 5, }} />
                                                {this.state.date === "" ?
                                                    <Text
                                                        style={SinistreStyle.createTaskDueDateText}>
                                                        Date du sinistre:
                                                    </Text> :
                                                    <Text
                                                        style={SinistreStyle.createTaskDueDateText}>
                                                        {moment(this.state.date).format("DD MMMM YYYYY")}
                                                    </Text>
                                                }

                                            </TouchableOpacity>
                                            <DateTimePicker
                                                isVisible={this.state.isDateTimePickerVisible}
                                                onConfirm={this._handleDatePicked}
                                                onCancel={this._hideDateTimePicker}
                                                mode={'date'}
                                            />
                                            <View
                                                style={SinistreStyle.Viewforavoid}>
                                            </View>
                                        </View>

                                        <View
                                            style={{
                                                width: "95%",
                                                borderRadius: 4, backgroundColor: "#ffffff",
                                                alignItems: 'center', justifyContent: 'space-between',
                                                // padding: 8,
                                                paddingVertical: 7,
                                                marginTop: 4, marginBottom: 4,
                                                marginHorizontal: 10, flexDirection: 'row',
                                                borderBottomColor: '#f6f7f9', borderBottomWidth: 1,
                                                //  height: 30,
                                            }}>
                                            <View
                                                style={{
                                                    justifyContent: 'flex-start', flexDirection: 'row',
                                                    marginLeft: 18, alignItems: 'center',
                                                }}>
                                                <Entypo name="attachment" size={14} color="black"
                                                    style={{ marginRight: 10, }} />
                                                <Text
                                                    style={SinistreStyle.viewTaskAttachmentLeftIcon}>
                                                    Ajouter les photos
                                                            </Text>
                                            </View>
                                            <TouchableOpacity
                                                onPress={() => this.openmodalForImage()}
                                                style={SinistreStyle.viewTaskAttachmentPlusIcon}>
                                                <Image
                                                    style={{ width: 20, height: 20 }} resizeMode='contain'
                                                    source={require('../../../assets/images/leftPlusBig.png')}>
                                                </Image>
                                            </TouchableOpacity>
                                        </View>
                                        {this.state.progressVisible == true ? (<ActivityIndicator size="large"
                                            color="#1B7F67" style={SinistreStyle.loaderIndicator} />) : null}
                                        <View style={SinistreStyle.scrollContainerView}>
                                            <FlatList
                                                data={this.state.fileList}
                                                extraData={this.state}
                                                keyExtractor={(i, index) => index.toString()}
                                                showsVerticalScrollIndicator={false}
                                                style={SinistreStyle.taskBoardContainer}
                                                numColumns={numColumns}
                                                renderItem={this.renderItem}

                                            />
                                        </View>
                                        <View
                                            style={SinistreStyle.Viewforavoid}>
                                        </View>
                                    </View>

                    </ScrollView>
                </View>

                <Modal style={[SinistreStyle.modalforCreateCompany1]} position={"center"} ref={"modal1"} isDisabled={this.state.isDisabled}
                    backdropPressToClose={false}
                    swipeToClose={false}
                >
                    <View style={{ justifyContent: "space-between", flexDirection: "row" }}>
                        <View style={{ alignItems: "flex-start" }}>
                        </View>
                        <View style={{ alignItems: "flex-end" }}>
                            <TouchableOpacity onPress={() => this.refs.modal1.close()} style={{
                                marginLeft: 0, marginTop: 0,
                            }}>
                                <Image resizeMode="contain" style={{ width: 15, height: 15, marginRight: 17, marginTop: 15 }} source={require('../../../assets/images/close.png')}>
                                </Image>
                            </TouchableOpacity>
                        </View>
                    </View>
                    <View style={SinistreStyle.dblModelContent}>
                        <ScrollView showsVerticalScrollIndicator={false} style={{ height: "80%" }}>
                            <View style={{}} >
                                <TouchableOpacity style={{ paddingVertical: 7, borderBottomColor: '#D5D5D5', borderBottomWidth: 2 }}
                                    onPress={() =>{} }>
                                    <Text style={[{ textAlign: 'center' }, SinistreStyle.dbblModalText]}>SUNU</Text>
                                </TouchableOpacity>
                                <TouchableOpacity style={{ paddingVertical: 7, borderBottomColor: '#D5D5D5', borderBottomWidth: 2 }}
                                    onPress={() =>{} }>
                                    <Text style={[{ textAlign: 'center' }, SinistreStyle.dbblModalText]}>SONAR</Text>
                                </TouchableOpacity>
                                <TouchableOpacity style={{ paddingVertical: 7, borderBottomColor: '#D5D5D5', borderBottomWidth: 2 }}
                                    onPress={() =>{} }>
                                    <Text style={[{ textAlign: 'center' }, SinistreStyle.dbblModalText]}>ALIANZ</Text>
                                </TouchableOpacity>
                            </View>
                        </ScrollView>
                    </View>
                </Modal>
                <Modal style={[SinistreStyle.modalforCreateCompany1]} position={"center"} ref={"modalPriority"}
                    backdropPressToClose={false}
                    swipeToClose={false}
                >
                    <View style={{ justifyContent: "space-between", flexDirection: "row" }}>
                        <View style={{ alignItems: "flex-start" }}>
                        </View>
                        <View style={{ alignItems: "flex-end" }}>
                            <TouchableOpacity onPress={() => this.refs.modalPriority.close()} style={{
                                marginLeft: 0, marginTop: 0,
                            }}>
                                <Image resizeMode="contain" style={{ width: 15, height: 15, marginRight: 17, marginTop: 15 }} source={require('../../../assets/images/close.png')}>
                                </Image>
                            </TouchableOpacity>
                        </View>
                    </View>
                    <View style={SinistreStyle.dblModelContent}>
                        <ScrollView showsVerticalScrollIndicator={false} style={{ height: "80%" }}>
                            <View style={{}} >
                                
                            </View>
                        </ScrollView>
                    </View>
                </Modal>
                <Modal
                    style={{
                        height: 180,
                        width: 250,
                        borderRadius: 20,
                    }}
                    position={"center"}
                    ref={"modalForImage"}
                    isDisabled={this.state.isDisabled}
                    backdropPressToClose={true}
                    swipeToClose={false}
                >
                    <View
                        style={{
                            justifyContent: "space-between",
                            flexDirection: "row"
                        }}>
                        <View
                            style={{ alignItems: "flex-start" }}>
                        </View>
                        <View style={{ alignItems: "flex-end" }}>
                            <TouchableOpacity
                                onPress={() => this.refs.modalForImage.close()}
                                style={{
                                    marginLeft: 0,
                                    marginTop: 0,
                                }}>
                                <Image
                                    resizeMode="contain"
                                    style={{ width: 15, height: 15, marginRight: 17, marginTop: 15 }}
                                    source={require('../../../assets/images/close.png')}>
                                </Image>
                            </TouchableOpacity>
                        </View>
                    </View>
                    <View>
                        <View>
                            <Text style={{
                                color: '#000000',
                                fontSize: 24,
                                textAlign: 'center',
                                fontWeight: '500'
                            }}>Add Photos</Text>
                        </View>
                        <View style={{
                            flexDirection: 'row',
                            padding: 15, justifyContent: 'space-between',
                            paddingTop: 20,
                        }}>
                            <TouchableOpacity onPress={() => this._takePhoto()} style={{ alignItems: "center", paddingLeft: 35 }}>
                                <Image resizeMode='contain' style={{ height: 36, width: 36, }} source={require('../../../assets/images/photo_camera_black.png')}></Image>
                                <Text style={{ textAlign: 'center', marginTop: 4, color: '#7a7a7a', fontSize: 10 }}>Take Photo</Text>
                            </TouchableOpacity>
                            <TouchableOpacity onPress={() => this._pickImage()} style={{ alignItems: 'center', paddingRight: 35 }}>
                                <Image resizeMode='contain' style={{ height: 36, width: 36, }} source={require('../../../assets/images/Gallary.png')}></Image>
                                <Text style={{ textAlign: 'center', marginTop: 4, color: '#7a7a7a', fontSize: 10 }}>From Gallary</Text>
                            </TouchableOpacity>
                        </View>
                    </View>
                </Modal>
                <Modal1
                    visible={this.state.isModelVisible}
                    transparent={false}
                    onRequestClose={() => this.ShowModalFunction()}>
                    <View
                        style={{
                            width: "100%",
                            padding: 5,
                            backgroundColor: 'black',
                            justifyContent: 'space-between',

                        }}>
                        <View style={{ alignItems: "flex-start", }}>

                        </View>
                        <TouchableOpacity
                            style={{ alignItems: "flex-end", padding: 10 }}
                            onPress={() => this.ShowModalFunction()}>
                            <Image resizeMode="contain" style={{ width: 15, height: 15, marginRight: 17, marginTop: 15 }}
                                // onPress={() => this.ShowModalFunction()}
                                source={require('../../../assets/images/close.png')}>
                            </Image>
                        </TouchableOpacity>
                    </View>
                    <ImageViewer
                        saveToLocalByLongPress={true}
                        // onSave={this.saveImageToFolder( this.state.images )}
                        imageUrls={this.state.images} >
                    </ImageViewer>
                </Modal1>

                

            </View >
        )
    }
}


const styles = StyleSheet.create({
    TitleText:{ 
        fontSize: 13,
         color: 'gray',
         marginBottom:20 
    },
    Select : {
        flex: 1, 
        flexDirection: 'column',
        marginBottom : 5 
    }  
})

